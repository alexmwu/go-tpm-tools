syntax = "proto3";

package attest;
option go_package = "github.com/google/go-tpm-tools/proto/attest";

import "tpm.proto";

// Information uniquely identifying a GCE instance. Can be used to create an
// instance URL, which can then be used with GCE APIs. Formatted like:
//   https://www.googleapis.com/compute/v1/projects/{project_id}/zones/{zone}/instances/{instance_name}
message GCEInstanceInfo {
  string zone = 1;
  string project_id = 2;
  uint64 project_number = 3;
  string instance_name = 4;
  uint64 instance_id = 5;
}

message Attestation {
  // Attestation Key (AK) Public Area, encoded as a TPMT_PUBLIC
  bytes ak_pub = 1;
  // Quotes over all supported PCR banks
  repeated tpm.Quote quotes = 2;
  // TCG Event Log, encoded in the raw binary format
  bytes event_log = 3;
  // Optional information about a GCE instance, unused outside of GCE
  GCEInstanceInfo instance_info = 4;
}

// Type of hardware technology used to protect this instance
enum GCEConfidentialTechnology {
  NONE = 0;
  AMD_SEV = 1;
  AMD_SEV_ES = 2;
}

// The platform/firmware state for this instance
message PlatformState {
  oneof firmware {
    // Raw S-CRTM version identifier (EV_S_CRTM_VERSION)
    bytes scrtm_version_id = 1;
    // Virtual GCE firmware version (parsed from S-CRTM version id)
    uint32 gce_version = 2;
  }
  // Set to NONE on non-GCE instances or non-Confidential Shielded GCE instances
  GCEConfidentialTechnology technology = 3;
  // Only set for GCE instances
  GCEInstanceInfo instance_info = 4;
}

message GrubFile {
  // The digest of the file (pulled from the raw event digest).
  bytes digest = 1;
  // The event data. This is not measured, so it is untrusted.
  bytes untrusted_filename = 2;
}

message GrubState {
  // All GRUB-read and measured files, including grub.cfg.
  repeated GrubFile files = 1;
  // A list of executed GRUB commands and command lines passed to the kernel
  // and kernel modules.
  repeated string commands = 2;
}
  
// DmVerityState exposes the cryptographic properties of a verity block device.
// It does not include per-machine specifics, like the device containing the
// or the device containing the hash tree. Users should build a dm-verity 
// device and extract its root hash prior to validating the state here.
//
// Currently, we only support ChromiumOS-style dm-verity command line flags
// versus upstream kernel flags.
// See (respectively): 
// https://chromium.googlesource.com/chromiumos/platform2/+/HEAD/installer/chromeos_setimage.cc
// vs
// https://www.kernel.org/doc/html/latest/admin-guide/device-mapper/verity.html
message DmVerityState {
  // The hash algorithm used for the dm-verity device.
  tpm.HashAlgo hash_alg = 1;
  // The root digest used for the dm-verity device.
  bytes root_digest = 2;
  // The cryptographic salt applied to the final digest.
  bytes salt = 3;
}

// The state of the Linux kernel.
// At the moment, parsing LinuxKernelState relies on parsing the GrubState.
// To do so, use ParseOpts{Loader: GRUB} when calling ParseMachineState.
message LinuxKernelState {
  // The kernel command line.
  string command_line = 1;
  // The dm-verity configuration extracted from the kernel command line.
  DmVerityState verity = 2;
}

// A parsed event from the TCG event log
message Event {
  // The Platform Control Register (PCR) this event was extended into.
  uint32 pcr_index = 1;
  // The type of this event. Note that this value is not verified, so it should
  // only be used as a hint during event parsing.
  uint32 untrusted_type = 2;
  // The raw data associated to this event. The meaning of this data is
  // specific to the type of the event.
  bytes data = 3;
  // The event digest actually extended into the TPM. This is often the hash of
  // the data field, but in some cases it may have a type-specific calculation.
  bytes digest = 4;
  // This is true if hash(data) == digest.
  bool digest_verified = 5;
}

// The verified state of a booted machine, obtained from an Attestation
message MachineState {
  PlatformState platform = 1;

  // SecureBootState secure_boot = 2;

  // The complete parsed TCG Event Log, including those events used to
  // create the PlatformState.
  repeated Event raw_events = 3;
  // The hash algorithm used when verifying the Attestation. This indicates:
  //   - which PCR bank was used for for quote validation and event log replay
  //   - the hash algorithm used to calculate event digests
  tpm.HashAlgo hash = 4;

  GrubState grub = 5;

  LinuxKernelState linux_kernel = 6;
}

// A policy dictating which values of PlatformState to allow
message PlatformPolicy {
  // If PlatformState.firmware contains a scrtm_version_id, it must appear
  // in this list. For use with a GCE VM, minimum_gce_firmware_version is
  // often a better alternative.
  repeated bytes allowed_scrtm_version_ids = 1;
  // If PlatformState.firmware contains a minimum_gce_firmware_version, it must
  // be greater than or equal to this value. Currently, the max version is 1.
  uint32 minimum_gce_firmware_version = 2;
  // The PlatformState's technology must be at least as secure as
  // the specified minimum_technology (i.e. AMD_SEV_ES > AMD_SEV > NONE).
  GCEConfidentialTechnology minimum_technology = 3;
}

// A policy dictating which type of MachineStates to allow
message Policy {
  PlatformPolicy platform = 1;

  // SecureBootPolicy secure_boot = 2;
}
